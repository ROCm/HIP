def hipBuildTest(String backendLabel) {
        node(backendLabel) {
          stage("SYNC - ${backendLabel}") {

            // Checkout hip repository with the PR patch
            dir("${WORKSPACE}/hip") {
               checkout scm
               env.HIP_DIR = "${WORKSPACE}" + "/hip"
            }

            // Clone hip-tests repository
            dir("${WORKSPACE}/hip-tests") {
              git branch: 'develop',
              url: 'https://github.com/ROCm-Developer-Tools/hip-tests'
              env.HIP_TESTS_DIR = "${WORKSPACE}" + "/hip-tests"
            }

            // Clone clr repository
            dir("${WORKSPACE}/clr") {
              git branch: 'develop',
              credentialsId: 'branch-credentials',
              url: 'https://github.com/ROCm-Developer-Tools/clr'
              env.CLR_DIR = "${WORKSPACE}" + "/clr"
            }
        }

        stage("BUILD - HIT ${backendLabel}") {
            // Running the build on clr workspace
            dir("${WORKSPACE}/clr") {
                sh  """#!/usr/bin/env bash
                    set -x
                    rm -rf build
                    mkdir build
                    cd build
                    # Check if backend label contains string "amd" or backend host is a server with amd gpu
                    if [[ $backendLabel =~ amd ]]; then
                        cmake -DCLR_BUILD_HIP=ON -DHIP_CATCH_TEST=0 -DHIP_COMMON_DIR=$HIP_DIR -DCMAKE_PREFIX_PATH="/opt/rocm/" -DCMAKE_INSTALL_PREFIX=\$PWD/install ..
                    else
                        cmake -DCLR_BUILD_HIP=ON -DHIP_CATCH_TEST=0 -DHIP_PLATFORM=nvidia -DHIP_COMMON_DIR=$HIP_DIR -DCMAKE_INSTALL_PREFIX=\$PWD/install ..
                    fi
                    make -j\$(nproc)
                    make install -j\$(nproc)
                    if [[ $backendLabel =~ amd ]]; then
                        make build_tests -j\$(nproc)
                    else
                        HIP_COMPILER=nvcc HIP_PLATFORM=nvidia make build_tests -j\$(nproc)
                    fi
                    """
            }
        }

        timeout(time: 1, unit: 'HOURS') {
            stage("TEST - HIT ${backendLabel}") {
                dir("${WORKSPACE}/clr/build/hipamd") {
                    sh  """#!/usr/bin/env bash
                        set -x
                        # Check if backend label contains string "amd" or backend host is a server with amd gpu
                        if [[ $backendLabel =~ amd ]]; then
                            sleep 120
                            LLVM_PATH=/opt/rocm/llvm ctest --overwrite BuildDirectory=. --output-junit hiptest_output_hit_amd.xml -E 'cooperative_streams_least_capacity.tst|cooperative_streams_half_capacity.tst|cooperative_streams_full_capacity.tst|grid_group_data_sharing.tst|hipIpcMemAccessTest.tst|p2p_copy_coherency.tst'
                        else
                            ctest --overwrite BuildDirectory=. --output-junit hiptest_output_hit_nvidia.xml
                        fi
                        """
                }
            }
        }

        stage("BUILD HIP - ${backendLabel}") {
            // Running the build on clr workspace
            dir("${WORKSPACE}/clr") {
                sh  """#!/usr/bin/env bash
                    set -x
                    rm -rf build
                    mkdir -p build
                    cd build
                    # Check if backend label contains string "amd" or backend host is a server with amd gpu
                    if [[ $backendLabel =~ amd ]]; then
                        cmake -DCLR_BUILD_HIP=ON -DHIP_PATH=\$PWD/install -DHIP_COMMON_DIR=\$HIP_DIR -DCMAKE_PREFIX_PATH="/opt/rocm/" -DCMAKE_INSTALL_PREFIX=\$PWD/install ..
                    else
                        cmake -DCLR_BUILD_HIP=ON -DHIP_PLATFORM=nvidia -DHIP_COMMON_DIR=\$HIP_DIR -DCMAKE_INSTALL_PREFIX=\$PWD/install ..
                    fi
                    make -j\$(nproc)
                    make install  -j\$(nproc)
                    """
            }
        }
        stage("BUILD HIP TESTS - ${backendLabel}") {
            // Running the build on HIP TESTS workspace
            dir("${WORKSPACE}/hip-tests") {
                env.HIP_PATH = "${CLR_DIR}" + "/build/install"
                sh  """#!/usr/bin/env bash
                    set -x
                    rm -rf build
                    mkdir -p build
                    cd build
                    echo "testing $HIP_PATH"
                    # Check if backend label contains string "amd" or backend host is a server with amd gpu
                    if [[ $backendLabel =~ amd ]]; then
                        cmake -DHIP_PLATFORM=amd ../catch 
                    else
                        export HIP_PLATFORM=nvidia
                        cmake -DHIP_PLATFORM=nvidia ../catch
                    fi
                    make -j\$(nproc) build_tests
                    """
            }
        }

        timeout(time: 1, unit: 'HOURS') {
            stage("TEST - CATCH2 ${backendLabel}") {
                dir("${WORKSPACE}/hip-tests") {
                    sh  """#!/usr/bin/env bash
                        set -x
                        cd build
                    if [[ $backendLabel =~ amd ]]; then
                        ctest --overwrite BuildDirectory=. --output-junit hiptest_output_catch_amd.xml
                    else
                        ctest --overwrite BuildDirectory=. --output-junit hiptest_output_catch_nvidia.xml -E 'Unit_hipMemcpyHtoD_Positive_Synchronization_Behavior|Unit_hipMemcpy_Positive_Synchronization_Behavior|Unit_hipFreeNegativeHost'
                    fi
                    """
               }
            }
        }
    }
}

timestamps {
    node('external-bootstrap') {
        skipDefaultCheckout()

        // labels belonging to each backend - AMD, NVIDIA
        String[] labels = ['hip-amd-vg20-ubu1804', 'hip-nvidia-rtx5000-ubu1804']
        buildMap = [:]

        labels.each { backendLabel ->
            echo "backendLabel: ${backendLabel}"
            buildMap[backendLabel] = { hipBuildTest(backendLabel) }
        }
        buildMap['failFast'] = false
        parallel  buildMap
    }
}

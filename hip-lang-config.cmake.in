# Copyright (C) 2021 Kitware, Inc. All Rights Reserved.
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

@PACKAGE_INIT@
include(CMakeFindDependencyMacro OPTIONAL RESULT_VARIABLE _CMakeFindDependencyMacro_FOUND)
if (NOT _CMakeFindDependencyMacro_FOUND)
  macro(find_dependency dep)
    if (NOT ${dep}_FOUND)
      set(cmake_fd_version)
      if (${ARGC} GREATER 1)
        set(cmake_fd_version ${ARGV1})
      endif()
      set(cmake_fd_exact_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION_EXACT)
        set(cmake_fd_exact_arg EXACT)
      endif()
      set(cmake_fd_quiet_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
        set(cmake_fd_quiet_arg QUIET)
      endif()
      set(cmake_fd_required_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)
        set(cmake_fd_required_arg REQUIRED)
      endif()
      find_package(${dep} ${cmake_fd_version}
          ${cmake_fd_exact_arg}
          ${cmake_fd_quiet_arg}
          ${cmake_fd_required_arg}
      )
      string(TOUPPER ${dep} cmake_dep_upper)
      if (NOT ${dep}_FOUND AND NOT ${cmake_dep_upper}_FOUND)
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "${CMAKE_FIND_PACKAGE_NAME} could not be found because dependency ${dep} could not be found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND False)
        return()
      endif()
      set(cmake_fd_version)
      set(cmake_fd_required_arg)
      set(cmake_fd_quiet_arg)
      set(cmake_fd_exact_arg)
    endif()
  endmacro()
endif()

set(HIP_COMPILER "@HIP_COMPILER@")
set(HIP_RUNTIME "@HIP_RUNTIME@")

find_dependency(AMDDeviceLibs)
find_dependency(amd_comgr)

include( "${CMAKE_CURRENT_LIST_DIR}/hip-lang-targets.cmake" )


# Approach:Find LLVM directly using find_dependency()
# IF LLVM_Successfully found, Check for VALID LLVM installation
# using LLVM package version major no & amdgcn target check of clang binary
# available in the LLVM install path found.
# On Failure: If VALID LLVM installation is not found
# Continued with old approach to use find_path() to search for LLVM include path
# in predefined relative search Directories
find_dependency(LLVM)
if( LLVM_FOUND )
  message(STATUS "Found LLVM PACKAGE in: ${LLVM_INSTALL_PREFIX}")
  if( LLVM_VERSION_MAJOR )
    # Check llvm package major version number to check for valid versions
    if( ${LLVM_VERSION_MAJOR} GREATER_EQUAL 13 )
      find_program(CLANG_TOOL_BINARY clang
                   PATHS ${LLVM_TOOLS_BINARY_DIR} NO_DEFAULT_PATH)
      if( CLANG_TOOL_BINARY )
        # fetch clang targets
        execute_process(COMMAND ${CLANG_TOOL_BINARY} --print-targets
          OUTPUT_VARIABLE LLVM_CLANG_AMDGCN_DETAILS
           OUTPUT_STRIP_TRAILING_WHITESPACE
           RESULT_VARIABLE CLANG_AMDGCN_FETCH_RESULT)
        # IF Successfully fetch clang targets, Check for amdgcn target
        if( (NOT CLANG_AMDGCN_FETCH_RESULT) AND
                              (LLVM_CLANG_AMDGCN_DETAILS MATCHES "amdgcn") )
          message(STATUS "LLVM Package Clang Version ${LLVM_PACKAGE_VERSION}"
                         " with amdgcn target FOUND" )
          file(GLOB HIP_CLANG_INCLUDE_PATH "${LLVM_LIBRARY_DIR}/clang/*/include" )
        else()
          # LLVM Package installation with clang targets has no amdgcn
          message(STATUS "Found LLVM PACKAGE does not include REQUIRED amdgcn target,"
                         " available targets: ${LLVM_CLANG_AMDGCN_DETAILS}.\n" )
          # Reset Flag to continue with old approach of predefined search path.
          set(LLVM_FOUND FALSE)
        endif() # CLANG Target Check
      else()
        # CLANG TOOL BINARY NOT FOUND
        # Reset Flag to continue with old approach of predefined search path.
        set(LLVM_FOUND FALSE)
      endif() # CLANG TOOL BINARY Check
    else()
      # LLVM Package installation found is not with valid version
      message(STATUS "Found LLVM PACKAGE is not of required version >= 13,"
                     "found version:  ${LLVM_VERSION_MAJOR}.\n" )
      # Reset Flag to continue with old approach of predefined search path.
      set(LLVM_FOUND FALSE)
    endif() # llvm package Version Check
  else()
    # LLVM_VERSION_MAJOR not available
    # Reset Flag to continue with old approach of predefined search path.
    set(LLVM_FOUND FALSE)
  endif() # LLVM_VERSION_MAJOR Check
else()
  # Reset Flag to continue with old approach of predefined search path.
  message(STATUS "LLVM PACKAGE NOT FOUND: using find_dep()\n" )
endif() # LLVM FOUND Check

# From hip-lang config directory, do three level up
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_DIR}" REALPATH)
get_filename_component(_IMPORT_PREFIX "${_DIR}/../../../" REALPATH)

# Use find_path() to find LLVM in predefined search location
# This is To retain old approach to use predefined search paths using find_path()
# Old approach will be enabled only if:
# NO Valid LLVM Package installation is found using find_dependency(LLVM)
if(NOT LLVM_FOUND)
  #need _IMPORT_PREFIX to be set #FILE_REORG_BACKWARD_COMPATIBILITY
  file(GLOB HIP_CLANG_INCLUDE_SEARCH_PATHS "${_IMPORT_PREFIX}/../llvm/lib/clang/*/include")
  file(GLOB HIP_CLANG_INCLUDE_SEARCH_PATHS_REORG "${_IMPORT_PREFIX}/llvm/lib/clang/*/include")
  find_path(HIP_CLANG_INCLUDE_PATH __clang_cuda_math.h
    HINTS ${HIP_CLANG_INCLUDE_SEARCH_PATHS}
          ${HIP_CLANG_INCLUDE_SEARCH_PATHS_REORG}
    NO_DEFAULT_PATH)
endif() # LLVM Package found Check

get_filename_component(HIP_CLANG_INCLUDE_PATH "${HIP_CLANG_INCLUDE_PATH}" DIRECTORY)

#If HIP isnot installed under ROCm, need this to find HSA assuming HSA is under ROCm
if( DEFINED ENV{ROCM_PATH} )
  set(ROCM_PATH "$ENV{ROCM_PATH}")
endif()

#if HSA is not under ROCm then provide CMAKE_PREFIX_PATH=<HSA_PATH>
find_path(HSA_HEADER hsa/hsa.h
  PATHS
    "${_IMPORT_PREFIX}/../include" #FILE_REORG_BACKWARD_COMPATIBILITY
    "${_IMPORT_PREFIX}/include"
    "${ROCM_PATH}/include"
)

if (NOT HSA_HEADER)
  message (FATAL_ERROR "HSA header not found! ROCM_PATH environment not set")
endif()

# CLANGRT LIB Search Path setting based on valid LLVM Path found
if( LLVM_FOUND )
  # IF VALID LLVM Package successfully found using find_dependency(LLVM)
  # Use binary tool option -print-libgcc-file-name --rtlib=compiler-rt
  # To fetch the compiler rt library file name.
  execute_process(
    COMMAND ${CLANG_TOOL_BINARY} -print-libgcc-file-name --rtlib=compiler-rt
    OUTPUT_VARIABLE CLANGRT_BUILTINS
    OUTPUT_STRIP_TRAILING_WHITESPACE
    RESULT_VARIABLE CLANGRT_BUILTINS_FETCH_EXIT_CODE)
else()
  # IF NO VALID LLVM Package successfully found using find_dependency(LLVM)
  # using predefined search paths for backward compatibility.
  get_filename_component(HIP_COMPILER_INSTALL_PATH ${CMAKE_HIP_COMPILER} DIRECTORY)
  file(GLOB HIP_CLANGRT_LIB_SEARCH_PATHS "${HIP_COMPILER_INSTALL_PATH}/../lib/clang/*/lib/*")
  find_library(CLANGRT_BUILTINS
      NAMES
        clang_rt.builtins
        clang_rt.builtins-x86_64
      PATHS
        ${HIP_CLANGRT_LIB_SEARCH_PATHS}
        ${HIP_CLANG_INCLUDE_PATH}/../lib/linux)
  # IF Failed to find clang_rt library
  if( "${CLANGRT_BUILTINS}" STREQUAL "CLANGRT_BUILTINS-NOTFOUND")
    # Set Exit Code for handling failure
    set(CLANGRT_BUILTINS_FETCH_EXIT_CODE "-1")
  else()
    set(CLANGRT_BUILTINS_FETCH_EXIT_CODE "0")
  endif()
endif()

set_target_properties(hip-lang::device PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include;${HIP_CLANG_INCLUDE_PATH}>"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include;${HIP_CLANG_INCLUDE_PATH}>"
)

set_target_properties(hip-lang::amdhip64 PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "$<$<COMPILE_LANGUAGE:HIP>:__HIP_ROCclr__=1>"
  INTERFACE_INCLUDE_DIRECTORIES "$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include;${HSA_HEADER}>"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "$<$<COMPILE_LANGUAGE:HIP>:${_IMPORT_PREFIX}/include;${HSA_HEADER}>"
)
set_target_properties(hip-lang::device PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "$<$<COMPILE_LANGUAGE:HIP>:__HIP_ROCclr__=1>"
)

set_property(TARGET hip-lang::device APPEND PROPERTY
  INTERFACE_COMPILE_OPTIONS "$<$<COMPILE_LANGUAGE:HIP>:SHELL:-mllvm;-amdgpu-early-inline-all=true;-mllvm;-amdgpu-function-calls=false>"
)

if (NOT EXISTS "${AMD_DEVICE_LIBS_PREFIX}/amdgcn/bitcode")
  set_property(TARGET hip-lang::device APPEND PROPERTY
    INTERFACE_COMPILE_OPTIONS "$<$<COMPILE_LANGUAGE:HIP>:--hip-device-lib-path=${AMD_DEVICE_LIBS_PREFIX}/lib>"
  )
endif()

set_property(TARGET hip-lang::device APPEND PROPERTY
  INTERFACE_LINK_OPTIONS "$<$<LINK_LANGUAGE:HIP>:--hip-link>"
)

# Add support for __fp16 and _Float16, explicitly link with compiler-rt
if( "${CLANGRT_BUILTINS_FETCH_EXIT_CODE}" STREQUAL "0" )
  set_property(TARGET hip-lang::device APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES "$<$<LINK_LANGUAGE:HIP>:${CLANGRT_BUILTINS}>"
  )
else()
  message(FATAL_ERROR "clangrt builtins lib not found")
endif()

# Approved by CMake to use this name. This is used so that HIP can
# change the name of the target and not require any modifications in CMake
set(_CMAKE_HIP_DEVICE_RUNTIME_TARGET "hip-lang::device")
